{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica{\*\falt Arial};}{\f6\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f16\fnil\fcharset77\fprq2{\*\panose 00000000000000000000}Zapf Dingbats{\*\falt Monotype Sorts};}
{\f17\fdecor\fcharset2\fprq2{\*\panose 00000000000000000000}ZapfDingbats;}{\f18\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}{\f19\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}
{\f20\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}{\f21\froman\fcharset0\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f22\froman\fcharset0\fprq2{\*\panose 00050102010706020507}Map Symbols;}
{\f23\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f24\froman\fcharset2\fprq2{\*\panose 05050102010205020202}MT Extra;}{\f25\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}
{\f26\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}{\f27\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f28\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}
{\f29\fswiss\fcharset0\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f30\fswiss\fcharset0\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f31\fdecor\fcharset0\fprq2{\*\panose 04020705040a02060702}Algerian;}
{\f32\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Almanac MT;}{\f33\fswiss\fcharset0\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f34\froman\fcharset0\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}
{\f35\fdecor\fcharset0\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f36\fdecor\fcharset0\fprq2{\*\panose 04040a05050d02020502}Beesknees ITC;}{\f37\froman\fcharset0\fprq2{\*\panose 02020503060305020303}Bell MT;}
{\f38\froman\fcharset0\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f39\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Bon Apetit MT;}{\f40\froman\fcharset0\fprq2{\*\panose 02040602050305030304}Book Antiqua;}
{\f41\fscript\fcharset0\fprq2{\*\panose 03070402050302030203}Bradley Hand ITC;}{\f42\fdecor\fcharset0\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f43\fswiss\fcharset0\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}
{\f44\fscript\fcharset0\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f45\froman\fcharset0\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f46\fswiss\fcharset0\fprq2{\*\panose 020b0502020202020204}Century Gothic;}
{\f47\froman\fcharset0\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f48\fdecor\fcharset0\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f49\froman\fcharset0\fprq2{\*\panose 0208090404030b020404}Cooper Black;}
{\f50\fswiss\fcharset0\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f51\fswiss\fcharset0\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f52\fdecor\fcharset0\fprq2{\*\panose 04040404050702020202}Curlz MT;}
{\f53\fdecor\fcharset0\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f54\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Directions MT;}{\f55\froman\fcharset0\fprq2{\*\panose 02090707080505020304}Engravers MT;}
{\f56\fswiss\fcharset0\fprq2{\*\panose 020b0907030504020204}Eras Bold ITC;}{\f57\fswiss\fcharset0\fprq2{\*\panose 020b0805030504020804}Eras Demi ITC;}{\f58\fswiss\fcharset0\fprq2{\*\panose 020b0402030504020804}Eras Light ITC;}
{\f59\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020804}Eras Medium ITC;}{\f60\fswiss\fcharset0\fprq2{\*\panose 020b0a07030504020204}Eras Ultra ITC;}{\f61\fswiss\fcharset0\fprq2{\*\panose 020b0504020202050204}Eurostile;}
{\f62\fdecor\fcharset0\fprq2{\*\panose 04060505060202020a04}Felix Titling;}{\f63\froman\fcharset0\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f64\fscript\fcharset0\fprq2{\*\panose 03060902040502070203}Forte;}
{\f65\fswiss\fcharset0\fprq2{\*\panose 020b0503020102020204}Franklin Gothic Book;}{\f66\fswiss\fcharset0\fprq2{\*\panose 020b0703020102020204}Franklin Gothic Demi;}{\f67\fswiss\fcharset0\fprq2{\*\panose 020b0706030402020204}Franklin Gothic Demi Cond;}
{\f68\fswiss\fcharset0\fprq2{\*\panose 020b0903020102020204}Franklin Gothic Heavy;}{\f69\fswiss\fcharset0\fprq2{\*\panose 020b0603020102020204}Franklin Gothic Medium;}
{\f70\fswiss\fcharset0\fprq2{\*\panose 020b0606030402020204}Franklin Gothic Medium Cond;}{\f71\fscript\fcharset0\fprq2{\*\panose 03020402040607040605}French Script MT;}
{\f72\fswiss\fcharset0\fprq2{\*\panose 020b0802020104020203}Gill Sans MT Ext Condensed Bold;}{\f73\froman\fcharset0\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}
{\f74\froman\fcharset0\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f75\froman\fcharset0\fprq2{\*\panose 0202090407030b020401}Goudy Stout;}{\f76\fscript\fcharset0\fprq2{\*\panose 03080302020302020206}Gradl;}
{\f77\fswiss\fcharset0\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}{\f78\fdecor\fcharset0\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f79\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Holidays MT;}
{\f80\fdecor\fcharset0\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f81\fdecor\fcharset0\fprq2{\*\panose 04040403040a02020202}Juice ITC;}{\f82\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Keystrokes MT;}
{\f83\fdecor\fcharset0\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f84\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f85\froman\fcharset0\fprq2{\*\panose 02040602050505020304}Lucida Bright;}
{\f86\fscript\fcharset0\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f87\froman\fcharset0\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f88\fscript\fcharset0\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}
{\f89\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f90\fmodern\fcharset0\fprq1{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f91\fswiss\fcharset0\fprq2{\*\panose 020e0502030308020204}Maiandra GD;}
{\f92\fdecor\fcharset0\fprq2{\*\panose 04040403030d02020704}Matisse ITC;}{\f93\fscript\fcharset0\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f94\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Mead Bold;}
{\f95\fnil\fcharset0\fprq2{\*\panose 01010101010101010101}Mercurius Script MT Bold;}{\f96\fscript\fcharset0\fprq2{\*\panose 03090702030407020403}Mistral;}{\f97\froman\fcharset0\fprq2{\*\panose 02070704070505020303}Modern No. 20;}
{\f98\fscript\fcharset0\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f99\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f100\fswiss\fcharset0\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}
{\f101\fmodern\fcharset0\fprq1{\*\panose 02010509020102010303}OCR A Extended;}{\f102\fdecor\fcharset0\fprq2{\*\panose 04050602080702020203}Onyx;}{\f103\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Parties MT;}
{\f104\froman\fcharset0\fprq2{\*\panose 02020502060401020303}Perpetua;}{\f105\froman\fcharset0\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f106\fswiss\fcharset0\fprq2{\*\panose 020b0606030402050204}Placard Condensed;}
{\f107\fdecor\fcharset0\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f108\fdecor\fcharset0\fprq2{\*\panose 040c0101020201010102}Ransom;}{\f109\froman\fcharset0\fprq2{\*\panose 02060603020205020403}Rockwell;}
{\f110\froman\fcharset0\fprq2{\*\panose 02060603050405020104}Rockwell Condensed;}{\f111\froman\fcharset0\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f112\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Signs MT;}
{\f113\fdecor\fcharset0\fprq2{\*\panose 04040a07060a02020202}Snap ITC;}{\f114\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Sports Three MT;}{\f115\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Sports Two MT;}
{\f116\fdecor\fcharset0\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f117\fdecor\fcharset0\fprq2{\*\panose 04020404030d07020202}Tempus Sans ITC;}{\f118\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Transport MT;}
{\f119\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Vacation MT;}{\f120\fscript\fcharset0\fprq2{\*\panose 03070502030502020203}Viner Hand ITC;}{\f121\froman\fcharset0\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}
{\f122\froman\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f123\froman\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f124\fmodern\fcharset0\fprq1{\*\panose 020b0509020102020204}Letter Gothic MT;}
{\f125\froman\fcharset0\fprq2{\*\panose 02020a06060301020303}Times New Roman MT Extra Bold;}{\f126\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}AvantGarde;}{\f127\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Bookman;}
{\f128\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica-Narrow;}{\f129\froman\fcharset0\fprq2{\*\panose 00000000000000000000}NewCenturySchlbk;}{\f130\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Palatino;}
{\f131\froman\fcharset0\fprq2{\*\panose 00000000000000000000}ZapfChancery;}{\f132\froman\fcharset238\fprq2 Times New Roman CE;}{\f133\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f135\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f136\froman\fcharset162\fprq2 Times New Roman Tur;}{\f137\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f138\fswiss\fcharset238\fprq2 Arial CE;}{\f139\fswiss\fcharset204\fprq2 Arial Cyr;}{\f141\fswiss\fcharset161\fprq2 Arial Greek;}
{\f142\fswiss\fcharset162\fprq2 Arial Tur;}{\f143\fswiss\fcharset186\fprq2 Arial Baltic;}{\f144\fmodern\fcharset238\fprq1 Courier New CE;}{\f145\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f147\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f148\fmodern\fcharset162\fprq1 Courier New Tur;}{\f149\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f222\fswiss\fcharset238\fprq2 Tahoma CE;}{\f223\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f225\fswiss\fcharset161\fprq2 Tahoma Greek;}
{\f226\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f227\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f246\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f247\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f249\fswiss\fcharset161\fprq2 Arial Narrow Greek;}
{\f250\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f251\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}{\f252\froman\fcharset238\fprq2 Garamond CE;}{\f253\froman\fcharset204\fprq2 Garamond Cyr;}{\f255\froman\fcharset161\fprq2 Garamond Greek;}
{\f256\froman\fcharset162\fprq2 Garamond Tur;}{\f257\froman\fcharset186\fprq2 Garamond Baltic;}{\f258\froman\fcharset238\fprq2 Bookman Old Style CE;}{\f259\froman\fcharset204\fprq2 Bookman Old Style Cyr;}
{\f261\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f262\froman\fcharset162\fprq2 Bookman Old Style Tur;}{\f263\froman\fcharset186\fprq2 Bookman Old Style Baltic;}{\f270\fscript\fcharset238\fprq2 Comic Sans MS CE;}
{\f271\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}{\f273\fscript\fcharset161\fprq2 Comic Sans MS Greek;}{\f274\fscript\fcharset162\fprq2 Comic Sans MS Tur;}{\f275\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}
{\f282\fswiss\fcharset238\fprq2 Arial Black CE;}{\f283\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f285\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f286\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f287\fswiss\fcharset186\fprq2 Arial Black Baltic;}
{\f288\fswiss\fcharset238\fprq2 Impact CE;}{\f289\fswiss\fcharset204\fprq2 Impact Cyr;}{\f291\fswiss\fcharset161\fprq2 Impact Greek;}{\f292\fswiss\fcharset162\fprq2 Impact Tur;}{\f293\fswiss\fcharset186\fprq2 Impact Baltic;}
{\f294\fswiss\fcharset238\fprq2 Verdana CE;}{\f295\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f297\fswiss\fcharset161\fprq2 Verdana Greek;}{\f298\fswiss\fcharset162\fprq2 Verdana Tur;}{\f299\fswiss\fcharset186\fprq2 Verdana Baltic;}
{\f522\fswiss\fcharset238\fprq2 Franklin Gothic Book CE;}{\f523\fswiss\fcharset204\fprq2 Franklin Gothic Book Cyr;}{\f525\fswiss\fcharset161\fprq2 Franklin Gothic Book Greek;}{\f526\fswiss\fcharset162\fprq2 Franklin Gothic Book Tur;}
{\f527\fswiss\fcharset186\fprq2 Franklin Gothic Book Baltic;}{\f528\fswiss\fcharset238\fprq2 Franklin Gothic Demi CE;}{\f529\fswiss\fcharset204\fprq2 Franklin Gothic Demi Cyr;}{\f531\fswiss\fcharset161\fprq2 Franklin Gothic Demi Greek;}
{\f532\fswiss\fcharset162\fprq2 Franklin Gothic Demi Tur;}{\f533\fswiss\fcharset186\fprq2 Franklin Gothic Demi Baltic;}{\f534\fswiss\fcharset238\fprq2 Franklin Gothic Demi Cond CE;}{\f535\fswiss\fcharset204\fprq2 Franklin Gothic Demi Cond Cyr;}
{\f537\fswiss\fcharset161\fprq2 Franklin Gothic Demi Cond Greek;}{\f538\fswiss\fcharset162\fprq2 Franklin Gothic Demi Cond Tur;}{\f539\fswiss\fcharset186\fprq2 Franklin Gothic Demi Cond Baltic;}{\f540\fswiss\fcharset238\fprq2 Franklin Gothic Heavy CE;}
{\f541\fswiss\fcharset204\fprq2 Franklin Gothic Heavy Cyr;}{\f543\fswiss\fcharset161\fprq2 Franklin Gothic Heavy Greek;}{\f544\fswiss\fcharset162\fprq2 Franklin Gothic Heavy Tur;}{\f545\fswiss\fcharset186\fprq2 Franklin Gothic Heavy Baltic;}
{\f546\fswiss\fcharset238\fprq2 Franklin Gothic Medium CE;}{\f547\fswiss\fcharset204\fprq2 Franklin Gothic Medium Cyr;}{\f549\fswiss\fcharset161\fprq2 Franklin Gothic Medium Greek;}{\f550\fswiss\fcharset162\fprq2 Franklin Gothic Medium Tur;}
{\f551\fswiss\fcharset186\fprq2 Franklin Gothic Medium Baltic;}{\f552\fswiss\fcharset238\fprq2 Franklin Gothic Medium Cond CE;}{\f553\fswiss\fcharset204\fprq2 Franklin Gothic Medium Cond Cyr;}
{\f555\fswiss\fcharset161\fprq2 Franklin Gothic Medium Cond Greek;}{\f556\fswiss\fcharset162\fprq2 Franklin Gothic Medium Cond Tur;}{\f557\fswiss\fcharset186\fprq2 Franklin Gothic Medium Cond Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\*\listtable{\list\listtemplateid-1\listsimple{\listlevel\levelnfc0
\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}}{\*\listoverridetable{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\leveljc0
\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 }}\ls1}}{\info{\title MdEdit Basics}{\author diane lowery}{\operator jim compton}{\creatim\yr1999\mo10\dy4\hr17\min18}
{\revtim\yr1999\mo10\dy4\hr17\min18}{\version2}{\edmins0}{\nofpages11}{\nofwords3006}{\nofchars17137}{\*\company Sybex Inc.}{\nofcharsws0}{\vern113}}\widowctrl\ftnbj\aenddoc\revisions\hyphcaps0\viewkind4\viewscale100 \fet0\sectd \linex0\sectdefaultcl 
{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\nowidctlpar\adjustright \fs20\cgrid {\b\f1\fs36\cgrid0 MdEdit Basics
\par }\pard \nowidctlpar\adjustright {\b\f1\cgrid0 An introduction to the basic features of the MdEdit example, discussed in Chapter 7 of the book "Mastering Delphi 5". Written and copyrighted by Marco Cant\'f9.
\par }{\fs22\cgrid0 
\par This document explains how you create a simple editor based on the RichEdit control
, using Delphi 5. The program has a menu and implements a number of features, including a complete scheme for opening and saving the text files. In fact, we want to be able to ask the user to save any modified file before opening a new one, to avoid losin
g any changes. Sounds like a professional application, doesn't it?
\par 
\par }{\b\f1\fs28\cgrid0 Menu and Actions
\par }{\fs22\cgrid0 
\par First of all, we need to build the menu, following the standard. The main menu starts with two standard pull-down menus, File and Edit, with the typical menu items. Then t
here are two specific pull-down menus, Font and Paragraph, with menu items to set the text font and alignment. The last two pull-down menus, Options and Help, are }{\i\fs22\cgrid0 almost }{\fs22\cgrid0 
standard: their names are standard, but their menu items are not. The Options menu has
 commands to change the background color and to count the characters, and the Help menu has only the About menu item. Here is the structure of the menu, extracted from the main form DFM file:
\par 
\par }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  MainMenu: TMainMenu
\par   Images = Images
\par   }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  File1: TMenuItem
\par     Caption = }{\i\f2\fs18\cgrid0 '&File'}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  New1: TMenuItem
\par       Action = acNew
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  N1: TMenuItem
\par       Caption = }{\i\f2\fs18\cgrid0 '-'}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  Open1: TMenuItem
\par       Action = acOpen
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  Save1: TMenuItem
\par       Action = acSave
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  Saveas1: TMenuItem
\par       Action = acSaveas
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  N2: TMenuItem
\par       Caption = }{\i\f2\fs18\cgrid0 '-'}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  Print1: TMenuItem
\par       Action = acPrint
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  N3: TMenuItem
\par       Caption = }{\i\f2\fs18\cgrid0 '-'}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object }{\f2\fs18\cgrid0 Exit1: TMenuItem
\par       Action = acExit1
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  Edit1: TMenuItem
\par     Caption = '}{\i\f2\fs18\cgrid0 &Edit}{\f2\fs18\cgrid0 '
\par     }{\b\f2\fs18\cgrid0 object }{\f2\fs18\cgrid0 Undo1: TMenuItem
\par       Action = acUndo
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  N6: TMenuItem
\par       Caption = '-'
\par     }{\b\f2\fs18\cgrid0 end
\par     object }{\f2\fs18\cgrid0 Cut2: TMenuItem
\par       Action = acCut
\par     }{\b\f2\fs18\cgrid0 end
\par     object }{\f2\fs18\cgrid0 Copy1: TMenuItem
\par       Action = acCopy
\par     }{\b\f2\fs18\cgrid0 end
\par     object }{\f2\fs18\cgrid0 Paste1: TMenuItem
\par       Action = acPaste
\par }{\b\f2\fs18\cgrid0     end
\par   end
\par   object }{\f2\fs18\cgrid0 Font1: TMenuItem
\par     Caption = '}{\i\f2\fs18\cgrid0 &Font}{\f2\fs18\cgrid0 '
\par     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  Bold1: TMenuItem
\par       Action = acBold
\par     }{\b\f2\fs18\cgrid0 end
\par     object }{\f2\fs18\cgrid0 Italic1: TMenuItem
\par       Action = acItalic
\par     }{\b\f2\fs18\cgrid0 end
\par     object }{\f2\fs18\cgrid0 N5: TMenuItem
\par       Caption = '-'
\par }{\b\f2\fs18\cgrid0     end
\par     object }{\f2\fs18\cgrid0 More1: TMenuItem
\par       Action = acFont
\par }{\b\f2\fs18\cgrid0     end
\par   end
\par   object }{\f2\fs18\cgrid0 Paragraph1: TMenuItem
\par     Caption = '}{\i\f2\fs18\cgrid0 &Paragraph}{\f2\fs18\cgrid0 '
\par     }{\b\f2\fs18\cgrid0 object }{\f2\fs18\cgrid0 LeftAligned1: TMenuItem
\par       Action = acLeftAligned
\par       GroupIndex = 1
\par       RadioItem = True
\par }{\b\f2\fs18\cgrid0     end
\par     object }{\f2\fs18\cgrid0 RightAligned1: TMenuItem
\par       Action = acRightAligned
\par       GroupIndex = 1
\par       RadioItem = True
\par }{\b\f2\fs18\cgrid0     end
\par     object }{\f2\fs18\cgrid0 Centered1: TMenuItem
\par       Action = acCentered
\par       GroupIndex = 1
\par       RadioItem = True
\par }{\b\f2\fs18\cgrid0     end
\par   end
\par   object }{\f2\fs18\cgrid0 Options1: TMenuItem
\par     Caption = '}{\i\f2\fs18\cgrid0 &Options}{\f2\fs18\cgrid0 '
\par     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  BackColor1: TMenuItem
\par       Action = acBackColor
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  Countchars1: TMenuItem
\par       Action = acCountchars
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  Help1: TMenuItem
\par     Caption = '}{\i\f2\fs18\cgrid0 &Help}{\f2\fs18\cgrid0 '
\par     }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  About1: TMenuItem
\par       Action = acAbout
\par     }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 end
\par end
\par }{\fs22\cgrid0 
\par As you can see, the menu is based on a number of actions. In this example, we want to implement all of the commands of the menu using actions, while th
e following versions (described in the book) add toolbars (with docking support), status bars, and many other user-interface enhancements. 
\par 
\par This is the DFM code for the ActionList component of the application. I've listed all of it here because this medium doesn\rquote t havehave the space limitations of the printed book
 and because this is an instructive example of the use of actions in Delphi:
\par 
\par }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  ActionList: TActionList
\par   Images = Images
\par   OnUpdate = ActionListUpdate
\par   }{\b\f2\fs18\cgrid0 object}{\f2\fs18\cgrid0  acNew: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 File}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &New}{\f2\fs18\cgrid0 '
\par     ImageIndex = 0
\par     ShortCut = 113
\par     OnExecute = NewExecute
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acOpen: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 File}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Open...}{\f2\fs18\cgrid0 '
\par     ImageIndex = 1
\par     ShortCut = 16463
\par     OnExecute = OpenExecute
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acSave: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 File}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Save}{\f2\fs18\cgrid0 '
\par     ImageIndex = 2
\par     ShortCut = 16467
\par     OnExecute = SaveExecute
\par     OnUpdate = acSaveUpdate
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acSaveas: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 File}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 Save &as...}{\f2\fs18\cgrid0 '
\par     OnExecute = SaveAsExecute
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acPrint: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 File}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Print}{\f2\fs18\cgrid0 '
\par     ImageIndex = 3
\par     ShortCut = 16464
\par     OnExecute = PrintExecute
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acExit1: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 File}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 E&xit}{\f2\fs18\cgrid0 '
\par     ShortCut = 32883
\par     OnExecute = ExitExecute
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acCut: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Edit}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 Cu&t}{\f2\fs18\cgrid0 '
\par     ImageIndex = 5
\par     ShortCut = 16472
\par     OnExecute = acCutExecute
\par     OnUpdate = acCutUpdate
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acCopy: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Edit}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Copy}{\f2\fs18\cgrid0 '
\par     ImageIndex = 6
\par     ShortCut = 16451
\par     OnExecute = acCopyExecute
\par     OnUpdate = acCutUpdate
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acPaste: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Edit}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Paste}{\f2\fs18\cgrid0 '
\par     ImageIndex = 7
\par     ShortCut = 16470
\par     OnExecute = acPasteExecute
\par     OnUpdate = acPasteUpdate
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acBold: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Font}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Bold}{\f2\fs18\cgrid0 '
\par     ImageIndex = 8
\par     ShortCut = 16450
\par     OnExecute = BoldExecute
\par     OnUpdate = acBoldUpdate
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acItalic: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Font}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Italic}{\f2\fs18\cgrid0 '
\par     ImageIndex = 9
\par     ShortCut = 16457
\par     OnExecute = ItalicExecute
\par     OnUpdate = acItalicUpdate
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acFont: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Font}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Font...}{\f2\fs18\cgrid0 '
\par     ImageIndex = 15
\par     OnExecute = FontExecute
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acLeftAligned: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Paragraph}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Left}{\f2\fs18\cgrid0 '
\par     Checked = True
\par     ImageIndex = 10
\par     ShortCut = 16460
\par     OnExecute = ChangeAlignment
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acCentered: TAction
\par     Tag = 2
\par     Category = '}{\i\f2\fs18\cgrid0 Paragraph}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Centered}{\f2\fs18\cgrid0 '
\par     ImageIndex = 11
\par     ShortCut = 16453
\par     OnExecute = ChangeAlignment
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acBackColor: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Options}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Background Color...}{\f2\fs18\cgrid0 '
\par     OnExecute = BackColorExecute
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acCountchars: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Options}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Count chars...}{\f2\fs18\cgrid0 '
\par     ImageIndex = 14
\par     OnExecute = CountCharsExecute
\par     OnUpdate = acCountcharsUpdate
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acAbout: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Help}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &About RichNote...}{\f2\fs18\cgrid0 '
\par     OnExecute = AboutExecute
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acUndo: TAction
\par     Category = '}{\i\f2\fs18\cgrid0 Edit}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Undo}{\f2\fs18\cgrid0 '
\par     ImageIndex = 4
\par     ShortCut = 16474
\par     OnExecute = acUndoExecute
\par     OnUpdate = acUndoUpdate
\par }{\b\f2\fs18\cgrid0   end
\par   object }{\f2\fs18\cgrid0 acRightAligned: TAction
\par     Tag = 1
\par     Category = '}{\i\f2\fs18\cgrid0 Paragraph}{\f2\fs18\cgrid0 '
\par     Caption = '}{\i\f2\fs18\cgrid0 &Right}{\f2\fs18\cgrid0 '
\par     ImageIndex = 12
\par     ShortCut = 16466
\par     OnExecute = ChangeAlignment
\par }{\b\f2\fs18\cgrid0   end
\par end
\par }{\f2\fs18\cgrid0 
\par }{\b\f1\fs28\cgrid0 The File Menu
\par }{\fs22\cgrid0 
\par As I mentioned at the beginning, the most complex part of this program is implementing the commands of the File pull-down menu\emdash 
New, Open, Save, and Save As. In each case, we need to track whether the current file has changed, saving the file only if it has. We should prompt the user to save the file each time the program creates a new file, loads an existing one, or terminates.

\par 
\par To accomplish this, I've added two fields and three methods to the class describing the form of the application:
\par }{\f2\fs18\cgrid0 
\par   }{\b\f2\fs18\cgrid0 private
\par }{\f2\fs18\cgrid0     FileName: string;
\par     Modified: Boolean;
\par   }{\b\f2\fs18\cgrid0 public
\par }{\f2\fs18\cgrid0     function SaveChanges: Boolean;
\par     function Save: Boolean;
\par     function SaveAs: Boolean;
\par }{\fs22\cgrid0 
\par The }{\f2\fs22\cgrid0 FileName}{\fs22\cgrid0  string and the }{\f2\fs22\cgrid0 Modified}{\fs22\cgrid0  flag are set when the form is created and changed when a new file is loaded or the user renames a file with the Save As command. T
hese two flags are initialized when the form is first created:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.FormCreate(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   FileName := }{\i\f2\fs18\cgrid0 ''}{\f2\fs18\cgrid0 ;
\par   Modified := False;
\par   Application.Title := Caption;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par The value of the flag changes as soon as you type new characters in the RichEdit control (in its }{\f2\fs22\cgrid0 OnChange}{\fs22\cgrid0  event handler):
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.RichEdit1Change(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\i\f2\fs18\cgrid0 // enables save operations
\par }{\f2\fs18\cgrid0   Modified := True;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par When a new file is created, the program checks whether the text has been modified. If so, it calls the }{\f2\fs22\cgrid0 SaveChanges}{\fs22\cgrid0  function, which asks the user whether to save the changes, discard them, or skip the current operation:

\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.New1Click(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 if not }{\f2\fs18\cgrid0 Modified }{\b\f2\fs18\cgrid0 or }{\f2\fs18\cgrid0 SaveChanges }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par   }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0     RichEdit1.Text := '';
\par     Modified := False;
\par     FileName := '';
\par     Caption := 'RichNote - [Untitled]';[ital? DL]
\par   }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par If the creation of a new file is confirmed, some simple operations take place, including using }{\i\fs22\cgrid0 'Untitled'}{\fs22\cgrid0  instead of the filename in the form's caption.
\par 
\par {\pntext\pard\plain\f3\fs22 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1
\ls1\pnrauth1\pnrdate641344594\pnrstart0\pnrxst1\pnrxst0\pnrxst183\pnrxst240\pnrstop4\pnrstart1\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrstop9\pnrstart2\pnrnfc23\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0
\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrstop18\pnrstart3\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0
\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrstop36\adjustright {\b\f1\fs22\cgrid0 
Note: Short-Circuit Evaluation. }{\f1\fs22\cgrid0 The expression }{\f2\fs22\cgrid0 if not Modified or SaveChanges then}{\i\f1\fs22\cgrid0  }{\f1\fs22\cgrid0 
requires some explanation. By default, Pascal performs what is called "short-circuit evaluation" of complex conditional expressions. The idea is simple: if the expression }{\f2\fs22\cgrid0 not Modified}{\f1\fs22\cgrid0 
 is true, we are sure that the whole expression is going to be true, and we don't need to evaluate the second expression. In this particular case, the second expression is a function call, and the function is called only if }{\f2\fs22\cgrid0 Modified}{
\f1\fs22\cgrid0  is }{\f2\fs22\cgrid0 True}{\f1\fs22\cgrid0 . This behavior of }{\f2\fs22\cgrid0 or}{\f1\fs22\cgrid0  and }{\f2\fs22\cgrid0 and}{\f1\fs22\cgrid0 
 expressions can be changed by setting a Delphi compiler option called Complete Boolean Eval. You can find it on the Compiler page of the Project Options dialog box.
\par }\pard \nowidctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\fs22\cgrid0 
\par The message box displayed by the }{\f2\fs22\cgrid0 SaveChanges}{\fs22\cgrid0  function has three options. If the user selects the Cancel button, the function returns }{\f2\fs22\cgrid0 False}{\fs22\cgrid0 
. If the user selects No, nothing happens (the file is not saved), and the function returns }{\f2\fs22\cgrid0 True}{\fs22\cgrid0 , to indicate that although we haven't actually saved the f
ile, the requested operation (such as creating a new file) can be accomplished. If the user selects Yes, the file is saved and the function returns }{\f2\fs22\cgrid0 True}{\fs22\cgrid0 .
\par 
\par In the code of this function, notice in particular the call to the }{\f2\fs22\cgrid0 MessageDlg}{\fs22\cgrid0  function used as the value of a }{\f2\fs22\cgrid0 case}{\fs22\cgrid0  statement:
\par }{\b\f2\fs18\cgrid0 
\par function }{\f2\fs18\cgrid0 TFormRichNote.SaveChanges: Boolean;
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 case}{\f2\fs18\cgrid0  MessageDlg (
\par     }{\i\f2\fs18\cgrid0 'The document '}{\f2\fs18\cgrid0  + filename + }{\i\f2\fs18\cgrid0 ' has changed.'}{\f2\fs18\cgrid0  +
\par     #13#13 + }{\i\f2\fs18\cgrid0 'Do you want to save the changes?'}{\f2\fs18\cgrid0 ,
\par     mtConfirmation, mbYesNoCancel, 0) }{\b\f2\fs18\cgrid0 of}{\f2\fs18\cgrid0 
\par   idYes:
\par }{\i\f2\fs18\cgrid0     // call Save and return its result
\par }{\f2\fs18\cgrid0     Result := Save;
\par   idNo:
\par }{\i\f2\fs18\cgrid0     // don't save and continue
\par }{\f2\fs18\cgrid0     Result := True;
\par   }{\b\f2\fs18\cgrid0 else}{\f2\fs18\cgrid0  }{\i\f2\fs18\cgrid0 // idCancel:}{\f2\fs18\cgrid0 
\par }{\i\f2\fs18\cgrid0     // don't save and abort operation
\par }{\f2\fs18\cgrid0     Result := False;
\par   }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par {\pntext\pard\plain\f3\fs22 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1
\ls1\pnrauth1\pnrdate641344594\pnrstart0\pnrxst1\pnrxst0\pnrxst183\pnrxst240\pnrstop4\pnrstart1\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrstop9\pnrstart2\pnrnfc23\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0
\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc1\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrstop18\pnrstart3\pnrpnbr1\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0
\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrstop36\adjustright {\b\f1\fs22\cgrid0 Note}{\f1\fs22\cgrid0 
: In the MessageDlg call above, I've added explicit newline characters (}{\f2\fs22\cgrid0 #13}{\f1\fs22\cgrid0 ) to improve the readability of the output. As an alternative to using a numeric character constant, you can call }{\f2\fs22\cgrid0 Chr(13)}{
\f1\fs22\cgrid0 .}{\f5\fs24\cgrid0 
\par }\pard \nowidctlpar\adjustright {\fs22\cgrid0 
\par To actually save the file, another function is invoked: }{\f2\fs22\cgrid0 Save}{\fs22\cgrid0 . This method saves the file if it already has a proper filename or asks the user to enter a name, calling the }{\f2\fs22\cgrid0 SaveAs}{\fs22\cgrid0 
 functions. These are two more internal functions, not directly connected with menu items:
\par 
\par }{\b\f2\fs18\cgrid0 function}{\f2\fs18\cgrid0  TFormRichNote.Save: Boolean;
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 if}{\f2\fs18\cgrid0  Filename = }{\i\f2\fs18\cgrid0 ''}{\f2\fs18\cgrid0  }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     Result := SaveAs }{\i\f2\fs18\cgrid0 // ask for a file name}{\f2\fs18\cgrid0 
\par }{\b\f2\fs18\cgrid0   else
\par   begin
\par }{\f2\fs18\cgrid0     RichEdit1.Lines.SaveToFile (FileName);
\par     Modified := False;
\par     Result := True;
\par }{\b\f2\fs18\cgrid0   end;
\par end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 function }{\f2\fs18\cgrid0 TFormRichNote.SaveAs: Boolean;
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   SaveDialog1.FileName := Filename;
\par   }{\b\f2\fs18\cgrid0 if}{\f2\fs18\cgrid0  SaveDialog1.Execute }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par   }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0     Filename := SaveDialog1.FileName;
\par     Save;
\par     Caption := }{\i\f2\fs18\cgrid0 'RichNote - '}{\f2\fs18\cgrid0  + Filename;
\par     Result := True;
\par   }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 else
\par }{\f2\fs18\cgrid0     Result := False;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par I use two functions to perform the Save and SaveAs operations (and do not call the corresponding menu handler d
irectly) because I need a way to report a request to cancel the operation from the user. To avoid code duplication, the handlers of the Save and SaveAs actions call the two functions too, although they ignore the return value:
\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.SaveExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 if}{\f2\fs18\cgrid0  Modified }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     Save;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 procedure}{\f2\fs18\cgrid0  TFormRichNote.SaveAsExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   SaveAs;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par Moreover, the Save action is enabled only if the file has not been modified, as indicated in the }{\f2\fs22\cgrid0 OnUpdate}{\fs22\cgrid0  event handler of the }{\f2\fs22\cgrid0 acSave}{\fs22\cgrid0  action:
\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.acSaveUpdate(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   acSave.Enabled := Modified;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par Opening a file is much simpler. Before loading a new file, the program checks whether the current file has changed, asking the user to save it with the }{\f2\fs22\cgrid0 SaveChanges}{\fs22\cgrid0  function, as before. The }{\f2\fs22\cgrid0 OpenExecute}{
\fs22\cgrid0  method is based on the OpenDialog component, another default dialog box provided by Windows and supported by Delphi:
\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.OpenExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 if not }{\f2\fs18\cgrid0 Modified }{\b\f2\fs18\cgrid0 or }{\f2\fs18\cgrid0 SaveChanges }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 if }{\f2\fs18\cgrid0 OpenDialog1.Execute }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0       Filename := OpenDialog1.FileName;
\par       RichEdit1.Lines.LoadFromFile (FileName);
\par       Modified := False;
\par       Caption := }{\i\f2\fs18\cgrid0 'RichNote - '}{\f2\fs18\cgrid0  + FileName;
\par     }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par The only other detail related to file operations is that both the OpenDialog and SaveDialog components of the NotesForm have a particular value for their }{\f2\fs22\cgrid0 Filter}{\fs22\cgrid0  and }{\f2\fs22\cgrid0 DefaultExt}{\fs22\cgrid0 
 properties, as you can see in the following fragment from the textual description of the form:
\par }{\b\f2\fs18\cgrid0 
\par object }{\f2\fs18\cgrid0 OpenDialog1: TOpenDialog
\par   DefaultExt = }{\i\f2\fs18\cgrid0 'rtf'}{\f2\fs18\cgrid0 
\par   FileEditStyle = fsEdit
\par   Filter = }{\i\f2\fs18\cgrid0 'Rich Text File (*.rtf)|*.rtf|Any file (*.*)|*.*'}{\f2\fs18\cgrid0 
\par   Options = [ofHideReadOnly, ofPathMustExist,ofFileMustExist]
\par }{\b\f2\fs18\cgrid0 end
\par }{\fs22\cgrid0 
\par The string used for the }{\f2\fs22\cgrid0 Filter}{\fs22\cgrid0  property contains four pairs of substrings, separated by the }{\f2\fs22\cgrid0 |}{\fs22\cgrid0 
 symbol. Each pair has a description of the type of file that will appear in the File Open or File Save dialog box, and the filter to be applied to the files in the directory, such as }{\f2\fs22\cgrid0 *.RTF}{\fs22\cgrid0 . To set the 
filters in Delphi, you can simply invoke the editor of this property, which displays a list with two columns.
\par 
\par The file-related methods above are also called from the }{\f2\fs22\cgrid0 FormCloseQuery}{\fs22\cgrid0  method (the handler of the }{\f2\fs22\cgrid0 OnCloseQuery}{\fs22\cgrid0  event), which is called each time 
the user tries to close the form, terminating the program. We can make this happen in various ways\emdash by double-clicking on the system menu icon, selecting the system menu's Close command, pressing the Alt+F4 keys, or calling the }{\f2\fs22\cgrid0 
Close}{\fs22\cgrid0  method in the code, as in the File }{\f14\fs22\cgrid0 \'d8}{\fs22\cgrid0 Exit menu command.
\par 
\par In }{\f2\fs22\cgrid0 FormCloseQuery}{\fs22\cgrid0 , you can decide whether or not to actually close the application by setting the }{\f2\fs22\cgrid0 CanClose}{\fs22\cgrid0 
 parameter, which is passed by reference. Again, if the current file has been modified, we call the }{\f2\fs22\cgrid0 SaveChanges}{\fs22\cgrid0  function and use its return value. Again we can use the short-circuit evaluation technique:
\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.FormCloseQuery(Sender: TObject;
\par   }{\b\f2\fs18\cgrid0 var }{\f2\fs18\cgrid0 CanClose: Boolean);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   CanClose := }{\b\f2\fs18\cgrid0 not }{\f2\fs18\cgrid0 Modified }{\b\f2\fs18\cgrid0 or }{\f2\fs18\cgrid0 SaveChanges;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par The last menu item of the File menu is the Print command. The RichEdit component includes print capabilities, and they are very simple to use. Here is the code, which actually produces a very nice printout:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.Print1Click(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   RichEdit1.Print (FileName);
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f1\fs28\cgrid0 The Edit Menu
\par }{\fs22\cgrid0 
\par The Edit menu performs standard operations with the clipboard, plus the Undo. Implementing this menu is simple, as the RichEdit component already provides full support for the requested actions:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.acUndoExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   RichEdit.Undo;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 procedure }{\f2\fs18\cgrid0 TFormRichNote.acCutExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   RichEdit.CutToClipboard;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 procedure }{\f2\fs18\cgrid0 TFormRichNote.acCopyExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   RichEdit.CopyToClipboard;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 procedure }{\f2\fs18\cgrid0 TFormRichNote.acPasteExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   RichEdit.PasteFromClipboard;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par Also refreshing the user interface of the actions is quite simple, as you can ask the RichEdit component whether it has changes to undo, check if there is selected text to copy, and (with a low-level }{\f2\fs22\cgrid0 SendMessage}{\fs22\cgrid0 
 call) verify whether the current clipboard content can be pasted in the text:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.acUndoUpdate(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   acUndo.Enabled := RichEdit.CanUndo;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 procedure }{\f2\fs18\cgrid0 TFormRichNote.acCutUpdate(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   acCut.Enabled := RichEdit.SelLength > 0;
\par   acCopy.Enabled := acCut.Enabled;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 procedure }{\f2\fs18\cgrid0 TFormRichNote.acPasteUpdate(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   acPaste.Enabled := SendMessage (
\par     RichEdit.Handle, em_CanPaste, 0, 0) <> 0;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f1\fs28\cgrid0 The Paragraph Menu
\par }{\fs22\cgrid0 
\par The code of the Paragraph menu is based on some properties the associated actions, particularly the value of the }{\f2\fs22\cgrid0 Tag}{\fs22\cgrid0 
 property. As you can see in the DFM listings presented earlier, the program uses radio menu items, by giving to the three items the same value for the }{\f2\fs22\cgrid0 GroupIndex}{\fs22\cgrid0  property and setting the }{\f2\fs22\cgrid0 RadioItem}{
\fs22\cgrid0  property to }{\f2\fs22\cgrid0 True}{\fs22\cgrid0 . 
\par 
\par The actions share the same }{\f2\fs22\cgrid0 ChangeAlignment}{\fs22\cgrid0  method for their }{\f2\fs22\cgrid0 OnExecute}{\fs22\cgrid0  events. Here is the code of the method, which is based on the correspondence between the }{\f2\fs22\cgrid0 Tag}{
\fs22\cgrid0  and the order of the values of the }{\f2\fs22\cgrid0 TAlignment}{\fs22\cgrid0  enumeration. It is a trick, but it works. Here is the code:
\par 
\par }{\b\f2\fs18\cgrid0 procedure }{\f2\fs18\cgrid0 TFormRichNote.ChangeAlignment(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\i\f2\fs18\cgrid0   // change paragraph alignment using the TAlignment
\par   // value saved in the tag of the action
\par }{\f2\fs18\cgrid0   RichEdit.Paragraph.Alignment := TAlignment (
\par     (Sender }{\b\f2\fs18\cgrid0 as}{\f2\fs18\cgrid0  TAction).Tag);
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par This procedure sets the alignment of the current paragraph (the paragraph including the selected text or the editor cursor). As you can see, this code relies on some controlled typecasts, based on the }{\f2\fs22\cgrid0 as}{\fs22\cgrid0 
 keyword: this is what you have to do any time you want to write generic code (that is, to attach the same methods to events of different components). The status of the actions, instead, is refreshed by the }{\f2\fs22\cgrid0 OnUpdate}{\fs22\cgrid0 
 event of the action list (to avoid duplicating the code and executing it multiple times):
\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.ActionListUpdate(Action: TBasicAction;
\par   }{\b\f2\fs18\cgrid0 var}{\f2\fs18\cgrid0  Handled: Boolean);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\i\f2\fs18\cgrid0 // check the proper paragraph alignment
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 case }{\f2\fs18\cgrid0 RichEdit.Paragraph.Alignment }{\b\f2\fs18\cgrid0 of}{\f2\fs18\cgrid0 
\par     taLeftJustify: acLeftAligned.Checked := True;
\par     taRightJustify: acRightAligned.Checked := True;
\par     taCenter: acCentered.Checked := True;
\par   }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f1\fs28\cgrid0 The Font Menu
\par }{\fs22\cgrid0 
\par The Font pull-down menu has only two options, Bold and Italic, plus a More menu item, which fires the standard Windows font selection dialog box. The Bold and Italic actions handle the executio
n and updates in a very similar way. Here is one of the two sets of methods:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.BoldExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 with}{\f2\fs18\cgrid0  RichEdit.SelAttributes }{\b\f2\fs18\cgrid0 do}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 if }{\f2\fs18\cgrid0 fsBold }{\b\f2\fs18\cgrid0 in}{\f2\fs18\cgrid0  Style }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par       Style := Style - [fsBold]
\par     }{\b\f2\fs18\cgrid0 else
\par }{\f2\fs18\cgrid0       Style := Style + [fsBold];
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 procedure }{\f2\fs18\cgrid0 TFormRichNote.acBoldUpdate(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   acBold.Checked := fsBold }{\b\f2\fs18\cgrid0 in}{\f2\fs18\cgrid0  RichEdit.SelAttributes.Style;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par Again, this code acts on the current selection (using the }{\f2\fs22\cgrid0 SelAttributes}{\fs22\cgrid0 
 property of the RichEdit1 component). The last item of this menu simply activates the Font dialog box. Notice that the font returned by this dialog box cannot be assigned directly to the }{\f2\fs22\cgrid0 SelAttributes}{\fs22\cgrid0 
 property; we need to call the }{\f2\fs22\cgrid0 Assign}{\fs22\cgrid0  method, instead:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.FontExecute(Sender: TObject);;
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   FontDialog1.Font := RichEdit1.Font;
\par   }{\b\f2\fs18\cgrid0 if}{\f2\fs18\cgrid0  FontDialog1.Execute }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     RichEdit1.SelAttributes.Assign (FontDialog1.Font);
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f1\fs28\cgrid0 The Options Menu
\par }{\fs22\cgrid0 
\par The last pull-down menu of the RichNot2 example is the Options menu. This menu has two unrelated commands used to customize the user interface and to determine and display the length of the text. The first 
command displays a color selection dialog box, used to change the color of the background of the RichEdit component:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.BackColorExecute(Sender: TObject);;
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   ColorDialog1.Color := RichEdit1.Color;
\par   }{\b\f2\fs18\cgrid0 if}{\f2\fs18\cgrid0  ColorDialog1.Execute }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     RichEdit1.Color := ColorDialog1.Color;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par The other menu item activates a method to count the number of characters in the text and display the total in a message box. The core of the method is the call to the }{\f2\fs22\cgrid0 GetTextLen}{\fs22\cgrid0  function of the RichEdit cont
rol. The number is extracted and formatted into an output string:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.Countchars1Click(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   MessageDlg (Format (
\par     }{\i\f2\fs18\cgrid0 'The text has %d characters'}{\f2\fs18\cgrid0 , [RichEdit1.GetTextLen]),
\par     mtInformation, [mbOK], 0);
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\fs22\cgrid0 The final menu, Help, has only an About command, which displays a message to the user.
\par 
\par }{\b\f1\fs28\cgrid0 Conclusion
\par }{\fs22\cgrid0 
\par As mentioned at the beginning, this was a rather long and complex example, but its purpose was to show you the implementation of the menu commands of a real-worl
d application. In particular, I explained in detail the File pull-down menu because this is something you'll probably need to handle in any file-related application. As this was too long for inclusion in the printed "Mastering Delphi 5," I've decided to p
lace it within the source code, instead of skipping it altogether.
\par 
\par You can now return to the book (mainly Chapter 7) to see how the example can be extended in a number of different ways.
\par }{\fs18\lang3081\cgrid0 
\par }}